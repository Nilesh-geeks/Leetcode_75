Problem :: 1679. Max Number of K-Sum Pairs

You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.
Time Complexity :: o(N * log N)
Space Complexity :: O(1)

CODE :: 
#pragma gcc optimize("03")
auto init = [](){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
class Solution {
    bool solve(vector<int>&v , int target){
        int i=0 , j= v.size()-1;
        while(i<=j){
            int mid = i + (j-i)/2;
            if(v[mid] == target){
                return 1;
            }
            else if(v[mid]<target){
                i = mid + 1;
            }
            else {
                j = mid - 1;
            }
        }
        return 0;
    }
public:
    int maxOperations(vector<int>& nums, int k) {

        // APPROACH 1
        sort(begin(nums) ,end(nums));
        int i=0 , j = nums.size()-1;
        int cnt =0;
        while(i<j){
            if(nums[i]+ nums[j] == k){
                i++ ;
                j--;
                cnt++;
            }
            else if(nums[i] + nums[j]<k){
                i++;
            }
            else {
                j--;
            }

        }
        return cnt  ;


        // APPROACH 2 not applicable
        // sort(begin(nums),end(nums));
        // int cnt=0;
        // for(int i:nums){
        //     cout<<i<<endl;
        //     cnt += solve(nums , k-i);
        // }
        // return cnt/2;
    }
};
